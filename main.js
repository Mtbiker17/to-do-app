(()=>{"use strict";function t(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function e(e){t(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function n(n){t(1,arguments);var r=e(n);return r.setHours(0,0,0,0),r}function r(e,r){t(2,arguments);var a=n(e),i=n(r);return a.getTime()===i.getTime()}function a(e){return t(1,arguments),r(e,Date.now())}function i(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}var o=36e5,s={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},u=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,l=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,c=/^([+-])(\d{2})(?::?(\d{2}))?$/;function d(e,n){t(1,arguments);var r=n||{},a=null==r.additionalDigits?2:i(r.additionalDigits);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var o,s=h(e);if(s.date){var u=m(s.date,a);o=f(u.restDateString,u.year)}if(isNaN(o)||!o)return new Date(NaN);var l,c=o.getTime(),d=0;if(s.time&&(d=w(s.time),isNaN(d)||null===d))return new Date(NaN);if(!s.timezone){var g=new Date(c+d),v=new Date(0);return v.setFullYear(g.getUTCFullYear(),g.getUTCMonth(),g.getUTCDate()),v.setHours(g.getUTCHours(),g.getUTCMinutes(),g.getUTCSeconds(),g.getUTCMilliseconds()),v}return l=p(s.timezone),isNaN(l)?new Date(NaN):new Date(c+d+l)}function h(t){var e,n={},r=t.split(s.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?(n.date=null,e=r[0]):(n.date=r[0],e=r[1],s.timeZoneDelimiter.test(n.date)&&(n.date=t.split(s.timeZoneDelimiter)[0],e=t.substr(n.date.length,t.length))),e){var a=s.timezone.exec(e);a?(n.time=e.replace(a[1],""),n.timezone=a[1]):n.time=e}return n}function m(t,e){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=t.match(n);if(!r)return{year:null};var a=r[1]&&parseInt(r[1]),i=r[2]&&parseInt(r[2]);return{year:null==i?a:100*i,restDateString:t.slice((r[1]||r[2]).length)}}function f(t,e){if(null===e)return null;var n=t.match(u);if(!n)return null;var r=!!n[4],a=g(n[1]),i=g(n[2])-1,o=g(n[3]),s=g(n[4]),l=g(n[5])-1;if(r)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,s,l)?function(t,e,n){var r=new Date(0);r.setUTCFullYear(t,0,4);var a=7*(e-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(e,s,l):new Date(NaN);var c=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(y[e]||(b(t)?29:28))}(e,i,o)&&function(t,e){return e>=1&&e<=(b(t)?366:365)}(e,a)?(c.setUTCFullYear(e,i,Math.max(a,o)),c):new Date(NaN)}function g(t){return t?parseInt(t):1}function w(t){var e=t.match(l);if(!e)return null;var n=v(e[1]),r=v(e[2]),a=v(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,r,a)?n*o+6e4*r+1e3*a:NaN}function v(t){return t&&parseFloat(t.replace(",","."))||0}function p(t){if("Z"===t)return 0;var e=t.match(c);if(!e)return 0;var n="+"===e[1]?-1:1,r=parseInt(e[2]),a=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,a)?n*(r*o+6e4*a):NaN}var y=[31,null,31,30,31,30,31,31,30,31,30,31];function b(t){return t%400==0||t%4==0&&t%100}function T(n,r){t(1,arguments);var a=r||{},o=a.locale,s=o&&o.options&&o.options.weekStartsOn,u=null==s?0:i(s),l=null==a.weekStartsOn?u:i(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=e(n),d=c.getDay(),h=(d<l?7:0)+d-l;return c.setDate(c.getDate()-h),c.setHours(0,0,0,0),c}function k(e,n,r){t(2,arguments);var a=T(e,r),i=T(n,r);return a.getTime()===i.getTime()}function C(e,n){return t(1,arguments),k(e,Date.now(),n)}function D(n,r){t(2,arguments);var a=e(n),i=e(r);return a.getFullYear()===i.getFullYear()&&a.getMonth()===i.getMonth()}function x(e){return t(1,arguments),D(Date.now(),e)}let M=[],P=[],E=[],j=[],U=[];class S{constructor(t,e,n,r,a,i){this.title=t,this.dueDate=r,this.priority=n,this.notes=e,this.taskID=a,this.completed=i}getTitle(){return this.title}setDueDate(){return this.dueDate}setPriority(){return this.priority}addNotes(){return this.notes}createTaskID(){return this.id}checkCompleted(){return this.completed}}function N(t){return!0===a(d(t.dueDate))&&P.push(t),!0===C(d(t.dueDate))&&E.push(t),!0===x(d(t.dueDate))&&j.push(t),"Important"===t.priority&&U.push(t),{dailyArray:P,weeklyArray:E,monthlyArray:j,importantArray:U}}function I(t,e,n){return e.forEach((e=>{!0===a(d(e.dueDate))&&!0===t&&e.taskID===n&&(P[e.taskID].completed=!0),!0===a(d(e.dueDate))&&!1===t&&e.taskID===n&&(P[e.taskID].completed=!1),!0===C(d(e.dueDate))&&!0===t&&e.taskID===n&&(E[e.taskID].completed=!0),!0===C(d(e.dueDate))&&!1===t&&e.taskID===n&&(E[e.taskID].completed=!1),!0===x(d(e.dueDate))&&1==t&&e.taskID===n&&(j[e.taskID].completed=!0),!0===x(d(e.dueDate))&&!1===t&&e.taskID===n&&(j[e.taskID].completed=!1),"Important"===e.priority&&!0===t&&e.taskID===n&&(U[e.taskID].completed=!0),"Important"===e.priority&&!1===t&&e.taskID===n&&(U[e.taskID].completed=!1)})),{dailyArray:P,weeklyArray:E,monthlyArray:j,importantArray:U}}let L=[];class W{constructor(t,e,n,r){this.title=t,this.projectID=e,this.completed=n,this.projectTaskList=r}getTitle(){return this.title}createProjectID(){return console.log("hi"),this.projectID}makeProjectTaskArray(){return projectTaskList=[],this.projectTaskList}}class Y{constructor(t,e){this.title=t,this.notes=e}getProjectTaskTitle(){return this.title}getProjectTaskNotes(){return this.notes}}function O(t){return localStorage.setItem("inboxArray",JSON.stringify(M))}function A(){return M=JSON.parse(localStorage.getItem("inboxArray")),null===M&&(M=[]),M}function q(t){return localStorage.setItem("projectArray",JSON.stringify(t))}function F(){return L=JSON.parse(localStorage.getItem("projectArray")),null===L&&(L=[]),L}function H(n){t(1,arguments);var r=e(n);return!isNaN(r)}var z={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function B(t){return function(e){var n=e||{},r=n.width?String(n.width):t.defaultWidth;return t.formats[r]||t.formats[t.defaultWidth]}}var X,Q={date:B({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:B({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:B({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},G={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function $(t){return function(e,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&t.formattingValues){var i=t.defaultFormattingWidth||t.defaultWidth,o=a.width?String(a.width):i;r=t.formattingValues[o]||t.formattingValues[i]}else{var s=t.defaultWidth,u=a.width?String(a.width):t.defaultWidth;r=t.values[u]||t.values[s]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function R(t){return function(e,n){var r=String(e),a=n||{},i=a.width,o=i&&t.matchPatterns[i]||t.matchPatterns[t.defaultMatchWidth],s=r.match(o);if(!s)return null;var u,l=s[0],c=i&&t.parsePatterns[i]||t.parsePatterns[t.defaultParseWidth];return u="[object Array]"===Object.prototype.toString.call(c)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(l))return n}(c):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(l))return n}(c),u=t.valueCallback?t.valueCallback(u):u,{value:u=a.valueCallback?a.valueCallback(u):u,rest:r.slice(l.length)}}}const J={code:"en-US",formatDistance:function(t,e,n){var r;return n=n||{},r="string"==typeof z[t]?z[t]:1===e?z[t].one:z[t].other.replace("{{count}}",e),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:Q,formatRelative:function(t,e,n,r){return G[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:$({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:$({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return Number(t)-1}}),month:$({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:$({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:$({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(X={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t,e){var n=String(t),r=e||{},a=n.match(X.matchPattern);if(!a)return null;var i=a[0],o=n.match(X.parsePattern);if(!o)return null;var s=X.valueCallback?X.valueCallback(o[0]):o[0];return{value:s=r.valueCallback?r.valueCallback(s):s,rest:n.slice(i.length)}}),era:R({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:R({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:R({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:R({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:R({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function Z(n,r){t(2,arguments);var a=e(n).getTime(),o=i(r);return new Date(a+o)}function _(e,n){t(2,arguments);var r=i(n);return Z(e,-r)}function V(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const K=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return V("yy"===e?r%100:r,e.length)},tt=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):V(n+1,2)},et=function(t,e){return V(t.getUTCDate(),e.length)},nt=function(t,e){return V(t.getUTCHours()%12||12,e.length)},rt=function(t,e){return V(t.getUTCHours(),e.length)},at=function(t,e){return V(t.getUTCMinutes(),e.length)},it=function(t,e){return V(t.getUTCSeconds(),e.length)},ot=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return V(Math.floor(r*Math.pow(10,n-3)),e.length)};var st=864e5;function ut(n){t(1,arguments);var r=1,a=e(n),i=a.getUTCDay(),o=(i<r?7:0)+i-r;return a.setUTCDate(a.getUTCDate()-o),a.setUTCHours(0,0,0,0),a}function lt(n){t(1,arguments);var r=e(n),a=r.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(a+1,0,4),i.setUTCHours(0,0,0,0);var o=ut(i),s=new Date(0);s.setUTCFullYear(a,0,4),s.setUTCHours(0,0,0,0);var u=ut(s);return r.getTime()>=o.getTime()?a+1:r.getTime()>=u.getTime()?a:a-1}function ct(e){t(1,arguments);var n=lt(e),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var a=ut(r);return a}var dt=6048e5;function ht(n,r){t(1,arguments);var a=r||{},o=a.locale,s=o&&o.options&&o.options.weekStartsOn,u=null==s?0:i(s),l=null==a.weekStartsOn?u:i(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=e(n),d=c.getUTCDay(),h=(d<l?7:0)+d-l;return c.setUTCDate(c.getUTCDate()-h),c.setUTCHours(0,0,0,0),c}function mt(n,r){t(1,arguments);var a=e(n,r),o=a.getUTCFullYear(),s=r||{},u=s.locale,l=u&&u.options&&u.options.firstWeekContainsDate,c=null==l?1:i(l),d=null==s.firstWeekContainsDate?c:i(s.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(o+1,0,d),h.setUTCHours(0,0,0,0);var m=ht(h,r),f=new Date(0);f.setUTCFullYear(o,0,d),f.setUTCHours(0,0,0,0);var g=ht(f,r);return a.getTime()>=m.getTime()?o+1:a.getTime()>=g.getTime()?o:o-1}function ft(e,n){t(1,arguments);var r=n||{},a=r.locale,o=a&&a.options&&a.options.firstWeekContainsDate,s=null==o?1:i(o),u=null==r.firstWeekContainsDate?s:i(r.firstWeekContainsDate),l=mt(e,n),c=new Date(0);c.setUTCFullYear(l,0,u),c.setUTCHours(0,0,0,0);var d=ht(c,n);return d}var gt=6048e5;function wt(t,e){var n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),i=r%60;if(0===i)return n+String(a);var o=e||"";return n+String(a)+o+V(i,2)}function vt(t,e){return t%60==0?(t>0?"-":"+")+V(Math.abs(t)/60,2):pt(t,e)}function pt(t,e){var n=e||"",r=t>0?"-":"+",a=Math.abs(t);return r+V(Math.floor(a/60),2)+n+V(a%60,2)}const yt={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return K(t,e)},Y:function(t,e,n,r){var a=mt(t,r),i=a>0?a:1-a;return"YY"===e?V(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):V(i,e.length)},R:function(t,e){return V(lt(t),e.length)},u:function(t,e){return V(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return V(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return V(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return tt(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return V(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(n,r,a,i){var o=function(n,r){t(1,arguments);var a=e(n),i=ht(a,r).getTime()-ft(a,r).getTime();return Math.round(i/gt)+1}(n,i);return"wo"===r?a.ordinalNumber(o,{unit:"week"}):V(o,r.length)},I:function(n,r,a){var i=function(n){t(1,arguments);var r=e(n),a=ut(r).getTime()-ct(r).getTime();return Math.round(a/dt)+1}(n);return"Io"===r?a.ordinalNumber(i,{unit:"week"}):V(i,r.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):et(t,e)},D:function(n,r,a){var i=function(n){t(1,arguments);var r=e(n),a=r.getTime();r.setUTCMonth(0,1),r.setUTCHours(0,0,0,0);var i=r.getTime(),o=a-i;return Math.floor(o/st)+1}(n);return"Do"===r?a.ordinalNumber(i,{unit:"dayOfYear"}):V(i,r.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var a=t.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return V(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});case"eeee":default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var a=t.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return V(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});case"cccc":default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return V(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,a=t.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,a=t.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return nt(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):rt(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):V(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):V(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):at(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):it(t,e)},S:function(t,e){return ot(t,e)},X:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return vt(a);case"XXXX":case"XX":return pt(a);case"XXXXX":case"XXX":default:return pt(a,":")}},x:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return vt(a);case"xxxx":case"xx":return pt(a);case"xxxxx":case"xxx":default:return pt(a,":")}},O:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+wt(a,":");case"OOOO":default:return"GMT"+pt(a,":")}},z:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+wt(a,":");case"zzzz":default:return"GMT"+pt(a,":")}},t:function(t,e,n,r){var a=r._originalDate||t;return V(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return V((r._originalDate||t).getTime(),e.length)}};function bt(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});case"PPPP":default:return e.date({width:"full"})}}function Tt(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});case"pppp":default:return e.time({width:"full"})}}const kt={p:Tt,P:function(t,e){var n,r=t.match(/(P+)(p+)?/),a=r[1],i=r[2];if(!i)return bt(t,e);switch(a){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;case"PPPP":default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",bt(a,e)).replace("{{time}}",Tt(i,e))}};function Ct(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var Dt=["D","DD"],xt=["YY","YYYY"];function Mt(t){return-1!==Dt.indexOf(t)}function Pt(t){return-1!==xt.indexOf(t)}function Et(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var jt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ut=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,St=/^'([^]*?)'?$/,Nt=/''/g,It=/[a-zA-Z]/;function Lt(n,r,a){t(2,arguments);var o=String(r),s=a||{},u=s.locale||J,l=u.options&&u.options.firstWeekContainsDate,c=null==l?1:i(l),d=null==s.firstWeekContainsDate?c:i(s.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=u.options&&u.options.weekStartsOn,m=null==h?0:i(h),f=null==s.weekStartsOn?m:i(s.weekStartsOn);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!u.localize)throw new RangeError("locale must contain localize property");if(!u.formatLong)throw new RangeError("locale must contain formatLong property");var g=e(n);if(!H(g))throw new RangeError("Invalid time value");var w=Ct(g),v=_(g,w),p={firstWeekContainsDate:d,weekStartsOn:f,locale:u,_originalDate:g},y=o.match(Ut).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,kt[e])(t,u.formatLong,p):t})).join("").match(jt).map((function(t){if("''"===t)return"'";var e=t[0];if("'"===e)return Wt(t);var a=yt[e];if(a)return!s.useAdditionalWeekYearTokens&&Pt(t)&&Et(t,r,n),!s.useAdditionalDayOfYearTokens&&Mt(t)&&Et(t,r,n),a(v,t,u.localize,p);if(e.match(It))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return t})).join("");return y}function Wt(t){return t.match(St)[1].replace(Nt,"'")}const Yt=(()=>{let t;const e=()=>{currentTitle.textContent="Inbox",addTask.style.visibility="visible",A(),t=M,Ot.removeChildren(),Ot.iterateTaskDisplay(t)},n=()=>{currentTitle.textContent="Today",addTask.style.visibility="visible",t=P,Ot.removeChildren(),Ot.iterateTaskDisplay(t)},r=()=>{currentTitle.textContent="Weekly",addTask.style.visibility="visible",t=E,Ot.removeChildren(),Ot.iterateTaskDisplay(t)},a=()=>{currentTitle.textContent="Monthly",addTask.style.visibility="visible",t=j,Ot.removeChildren(),Ot.iterateTaskDisplay(t)},i=()=>{currentTitle.textContent="Important",addTask.style.visibility="visible",t=U,Ot.removeChildren(),Ot.iterateTaskDisplay(t)},o=()=>{F(),currentTitle.textContent="Projects",addTask.style.visibility="hidden",t=L,Ot.removeProjectChildren(),Ot.removeChildren(),Ot.iterateTaskDisplay(t)};return inbox.addEventListener("click",(()=>{e()})),today.addEventListener("click",(()=>{n()})),week.addEventListener("click",(()=>{r()})),month.addEventListener("click",(()=>{a()})),important.addEventListener("click",(()=>{i()})),arrow.addEventListener("click",(()=>{o()})),{showInbox:e,showDaily:n,showWeekly:r,showMonthly:a,showImportant:i,showProjects:o}})(),Ot=(addTask.addEventListener("click",(()=>{taskModal.style.display="flex"})),closeBtn.onclick=()=>taskModal.style.display="none",submitTask.addEventListener("click",(()=>{if(""===submitTitle.value)return void alert("Task must have a title");if(""===modaldateinput.value)return void alert("Please enter a due date for this task");let n=Lt(d(modaldateinput.value),"MM/dd/yyyy"),r=Lt(new Date,"MM/dd/yyyy");if(!0===function(n,r){t(2,arguments);var a=e(n),i=e(r);return a.getTime()<i.getTime()}(new Date(n),new Date(r)))return void alert("This due date occurs before todays date");A();const a=new S(`${submitTitle.value}`,`${submitNotes.value}`,`${submitPriority.value}`,`${modaldateinput.value}`,`${M.length}`,!1);M.push(a),N(a),O(),submitTitle.value="",submitNotes.value="",modaldateinput.value="",taskModal.style.display="none",Ot.refreshTasksUI(currentTitle.textContent)})),(()=>{addProject.addEventListener("click",(()=>{projectModal.style.display="flex",Yt.showProjects()})),projectTaskCloseBtn.onclick=()=>projectTaskModal.style.display="none",projectCloseBtn.onclick=()=>projectModal.style.display="none";submitProject.addEventListener("click",(()=>{if(""===submitProjectTitle.value)return void alert("Project must have a title");projectsContainer.style.visibility="hidden",arrow.classList.remove("arrowDown"),"visible"!==projectsContainer.style.visibility?(arrow.classList.add("arrowDown"),projectsContainer.style.visibility="visible"):projectsContainer.style.visibility="hidden",F();const t=new W(`${submitProjectTitle.value}`,`${L.length}`,!1,[]);L.push(t),q(L),submitProject.value="",projectModal.style.display="none",Ot.refreshTasksUI(currentTitle.textContent)})),submitProjectTask.addEventListener("click",(()=>{let t=document.getElementsByClassName("projectTitleDisplay")[0].id;if(""===projectTaskTitle.value)return void alert("Please give task a title");const e=new Y(projectTaskTitle.value,projectTaskNotes.value);L[t].projectTaskList.push(e),q(L),console.log(L[t])}))})(),(()=>{const t=t=>{"Inbox"===t?Yt.showInbox():"Today"===t?Yt.showDaily():"Weekly"===t?Yt.showWeekly():"Monthly"===t?Yt.showMonthly():"Important"===t?Yt.showImportant():"Projects"===t&&(taskButtonContainer.style.visibility="visible",Yt.showProjects())},e=(t,e,n,r,a,i)=>{let o=document.createElement("div");o.classList.add("task"),o.setAttribute("id",`${r}`);let s=document.createElement("label");s.classList.add("checkbox-label");let u=document.createElement("input");u.setAttribute("type","checkbox"),s.appendChild(u);let l=document.createElement("span");l.classList.add("checkbox-custom"),s.appendChild(l);let c=document.createElement("div");c.setAttribute("id","taskTitle"),c.textContent=t;let d=document.createElement("div");d.setAttribute("id","taskNotes"),d.textContent="Notes:";let h=document.createElement("div");h.setAttribute("id","notes"),h.textContent=e;let m=document.createElement("div");m.setAttribute("id","dueDate"),m.textContent="Due Date:";let f=document.createElement("input");f.setAttribute("type","date"),f.setAttribute("id","date"),f.value=`${n}`,o.appendChild(s),o.appendChild(c),o.appendChild(d),d.appendChild(h),o.appendChild(m),m.appendChild(f),taskContainer.appendChild(o),!0===a?(c.style.textDecoration="line-through",u.checked=!0):!1===a&&(u.checked=!1,c.style.textDecoration="none"),"Important"===i&&c.classList.add("pseudoImportant"),u.addEventListener("click",(()=>{A(),!0===u.checked?(M[r].completed=!0,c.style.textDecoration="line-through",O(),I(!0,M,r)):!1===u.checked&&(M[r].completed=!1,c.style.textDecoration="none",O(),I(!1,M,r))}))},n=(e,n,r)=>{let a=document.createElement("div");a.setAttribute("id",n),a.classList.add("projectList");let i=document.createElement("label");i.classList.add("checkbox-label");let o=document.createElement("input");o.setAttribute("type","checkbox"),i.appendChild(o);let s=document.createElement("span");s.classList.add("checkbox-custom"),s.style.marginTop="5px",i.appendChild(s);let u=document.createElement("div");u.setAttribute("id",n),u.textContent=e,u.classList.add("projectTitle"),a.appendChild(i),a.appendChild(u),projectsContainer.appendChild(a),!0===r?(o.checked=!0,u.style.textDecoration="line-through"):!1===r&&(o.checked=!1,u.style.textDecoration="none"),o.addEventListener("click",(()=>{F(),!0===o.checked?(L[n].completed=!0,u.style.textDecoration="line-through",q(L),t(currentTitle.textContent)):!1===o.checked&&(L[n].completed=!1,u.style.textDecoration="none",q(L),t(currentTitle.textContent))})),a.addEventListener("click",(()=>{console.log(L[a.id]),taskButtonContainer.style.visibility="visible",Yt.showProjects();let t=document.createElement("div"),r=document.createElement("div");r.classList.add("taskControl"),r.setAttribute("id",`${n}`),r.setAttribute("id","addProjectTask"),r.textContent="Add Project Task",t.classList.add("projectTitleDisplay"),t.setAttribute("id",`${n}`),t.textContent=e,taskContainer.appendChild(t),taskContainer.appendChild(r),r.addEventListener("click",(()=>{projectTaskModal.style.display="flex"}))}))};return remove.addEventListener("click",(()=>{A(),F(),M.forEach((t=>{!0===t.completed&&M.splice(t.taskID,1)})),L.forEach((t=>{!0===t.completed&&L.splice(t.projectID,1)})),O(),q(L),location.reload()})),arrow.addEventListener("click",(()=>{arrow.classList.toggle("arrowDown"),"visible"!==projectsContainer.style.visibility?projectsContainer.style.visibility="visible":projectsContainer.style.visibility="hidden"})),{removeChildren:()=>{for(;taskContainer.lastElementChild;)taskContainer.removeChild(taskContainer.lastElementChild)},showTaskUI:e,iterateTaskDisplay:t=>{t!==L?t.forEach((t=>{e(t.title,t.notes,t.dueDate,t.taskID,t.completed,t.priority)})):t.forEach((t=>{n(t.title,t.projectID,t.completed)}))},refreshTasksUI:t,showProjectUI:n,removeProjectChildren:()=>{for(;projectsContainer.lastElementChild;)projectsContainer.removeChild(projectsContainer.lastElementChild)}}})());console.log("webpack worked"),window.localStorage,function(){A(),F();let t=0,e=0;M.forEach((e=>{e.taskID=t,N(e),t++})),O(),L.forEach((t=>{t.projectID=e,e++,q(L)})),Ot.iterateTaskDisplay(M),Ot.iterateTaskDisplay(L)}(),function(t,e,n){var r=new Date,a=new Date;(r.getHours()>24||24==r.getHours()&&r.getMinutes()>0||24==r.getHours()&&0==r.getMinutes()&&r.getSeconds()>=0)&&a.setDate(r.getDate()+1),a.setHours(24),a.setMinutes(0),a.setSeconds(0);var i=a.getTime()-r.getTime();setTimeout((function(){window.location.reload()}),i)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
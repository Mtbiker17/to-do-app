(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function n(n){e(1,arguments);var r=t(n);return r.setHours(0,0,0,0),r}function r(t,r){e(2,arguments);var a=n(t),i=n(r);return a.getTime()===i.getTime()}function a(t){return e(1,arguments),r(t,Date.now())}function i(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}var o=36e5,s={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},u=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,l=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,c=/^([+-])(\d{2})(?::?(\d{2}))?$/;function d(t,n){e(1,arguments);var r=n||{},a=null==r.additionalDigits?2:i(r.additionalDigits);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var o,s=h(t);if(s.date){var u=m(s.date,a);o=f(u.restDateString,u.year)}if(isNaN(o)||!o)return new Date(NaN);var l,c=o.getTime(),d=0;if(s.time&&(d=p(s.time),isNaN(d)||null===d))return new Date(NaN);if(!s.timezone){var g=new Date(c+d),v=new Date(0);return v.setFullYear(g.getUTCFullYear(),g.getUTCMonth(),g.getUTCDate()),v.setHours(g.getUTCHours(),g.getUTCMinutes(),g.getUTCSeconds(),g.getUTCMilliseconds()),v}return l=y(s.timezone),isNaN(l)?new Date(NaN):new Date(c+d+l)}function h(e){var t,n={},r=e.split(s.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?(n.date=null,t=r[0]):(n.date=r[0],t=r[1],s.timeZoneDelimiter.test(n.date)&&(n.date=e.split(s.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var a=s.timezone.exec(t);a?(n.time=t.replace(a[1],""),n.timezone=a[1]):n.time=t}return n}function m(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:null};var a=r[1]&&parseInt(r[1]),i=r[2]&&parseInt(r[2]);return{year:null==i?a:100*i,restDateString:e.slice((r[1]||r[2]).length)}}function f(e,t){if(null===t)return null;var n=e.match(u);if(!n)return null;var r=!!n[4],a=g(n[1]),i=g(n[2])-1,o=g(n[3]),s=g(n[4]),l=g(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,s,l)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(t,s,l):new Date(NaN);var c=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(w[t]||(b(e)?29:28))}(t,i,o)&&function(e,t){return t>=1&&t<=(b(e)?366:365)}(t,a)?(c.setUTCFullYear(t,i,Math.max(a,o)),c):new Date(NaN)}function g(e){return e?parseInt(e):1}function p(e){var t=e.match(l);if(!t)return null;var n=v(t[1]),r=v(t[2]),a=v(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,a)?n*o+6e4*r+1e3*a:NaN}function v(e){return e&&parseFloat(e.replace(",","."))||0}function y(e){if("Z"===e)return 0;var t=e.match(c);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(r*o+6e4*a):NaN}var w=[31,null,31,30,31,30,31,31,30,31,30,31];function b(e){return e%400==0||e%4==0&&e%100}function T(n,r){e(1,arguments);var a=r||{},o=a.locale,s=o&&o.options&&o.options.weekStartsOn,u=null==s?0:i(s),l=null==a.weekStartsOn?u:i(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=t(n),d=c.getDay(),h=(d<l?7:0)+d-l;return c.setDate(c.getDate()-h),c.setHours(0,0,0,0),c}function k(t,n,r){e(2,arguments);var a=T(t,r),i=T(n,r);return a.getTime()===i.getTime()}function C(t,n){return e(1,arguments),k(t,Date.now(),n)}function D(n,r){e(2,arguments);var a=t(n),i=t(r);return a.getFullYear()===i.getFullYear()&&a.getMonth()===i.getMonth()}function x(t){return e(1,arguments),D(Date.now(),t)}let j=[],M=[],E=[],P=[],U=[];class I{constructor(e,t,n,r,a,i){this.title=e,this.dueDate=r,this.priority=n,this.notes=t,this.taskID=a,this.completed=i}getTitle(){return this.title}setDueDate(){return this.dueDate}setPriority(){return this.priority}addNotes(){return this.notes}createTaskID(){return this.id}checkCompleted(){return this.completed}}function N(e){return!0===a(d(e.dueDate))&&M.push(e),!0===C(d(e.dueDate))&&E.push(e),!0===x(d(e.dueDate))&&P.push(e),"Important"===e.priority&&U.push(e),{dailyArray:M,weeklyArray:E,monthlyArray:P,importantArray:U}}function S(e,t,n){return t.forEach((t=>{!0===a(d(t.dueDate))&&!0===e&&t.taskID===n&&(M[t.taskID].completed=!0),!0===a(d(t.dueDate))&&!1===e&&t.taskID===n&&(M[t.taskID].completed=!1),!0===C(d(t.dueDate))&&!0===e&&t.taskID===n&&(E[t.taskID].completed=!0),!0===C(d(t.dueDate))&&!1===e&&t.taskID===n&&(E[t.taskID].completed=!1),!0===x(d(t.dueDate))&&1==e&&t.taskID===n&&(P[t.taskID].completed=!0),!0===x(d(t.dueDate))&&!1===e&&t.taskID===n&&(P[t.taskID].completed=!1),"Important"===t.priority&&!0===e&&t.taskID===n&&(U[t.taskID].completed=!0),"Important"===t.priority&&!1===e&&t.taskID===n&&(U[t.taskID].completed=!1)})),{dailyArray:M,weeklyArray:E,monthlyArray:P,importantArray:U}}let L=[];class W{constructor(e,t,n,r){this.title=e,this.projectID=t,this.completed=n,this.projectTaskList=r}getTitle(){return this.title}createProjectID(){return console.log("hi"),this.projectID}makeProjectTaskArray(){return projectTaskList=[],this.projectTaskList}}class Y{constructor(e,t,n,r,a){this.title=e,this.notes=t,this.projectTaskID=n,this.projID=r,this.completed=a}getProjectTaskTitle(){return this.title}getProjectTaskNotes(){return this.notes}getProjectTaskID(){return this.projectTaskID}getProjectID(){return this.projID}getCompleted(){return this.completed}}function A(e){return localStorage.setItem("inboxArray",JSON.stringify(j))}function O(){return j=JSON.parse(localStorage.getItem("inboxArray")),null===j&&(j=[]),j}function q(e){return localStorage.setItem("projectArray",JSON.stringify(e))}function F(){return L=JSON.parse(localStorage.getItem("projectArray")),null===L&&(L=[]),L}function H(n){e(1,arguments);var r=t(n);return!isNaN(r)}var z={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function B(e){return function(t){var n=t||{},r=n.width?String(n.width):e.defaultWidth;return e.formats[r]||e.formats[e.defaultWidth]}}var X,R={date:B({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:B({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:B({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},Q={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function G(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,o=a.width?String(a.width):i;r=e.formattingValues[o]||e.formattingValues[i]}else{var s=e.defaultWidth,u=a.width?String(a.width):e.defaultWidth;r=e.values[u]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function $(e){return function(t,n){var r=String(t),a=n||{},i=a.width,o=i&&e.matchPatterns[i]||e.matchPatterns[e.defaultMatchWidth],s=r.match(o);if(!s)return null;var u,l=s[0],c=i&&e.parsePatterns[i]||e.parsePatterns[e.defaultParseWidth];return u="[object Array]"===Object.prototype.toString.call(c)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(l))return n}(c):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(l))return n}(c),u=e.valueCallback?e.valueCallback(u):u,{value:u=a.valueCallback?a.valueCallback(u):u,rest:r.slice(l.length)}}}const J={code:"en-US",formatDistance:function(e,t,n){var r;return n=n||{},r="string"==typeof z[e]?z[e]:1===t?z[e].one:z[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:R,formatRelative:function(e,t,n,r){return Q[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:G({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:G({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:G({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:G({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:G({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(X={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),r=t||{},a=n.match(X.matchPattern);if(!a)return null;var i=a[0],o=n.match(X.parsePattern);if(!o)return null;var s=X.valueCallback?X.valueCallback(o[0]):o[0];return{value:s=r.valueCallback?r.valueCallback(s):s,rest:n.slice(i.length)}}),era:$({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:$({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:$({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:$({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:$({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function Z(n,r){e(2,arguments);var a=t(n).getTime(),o=i(r);return new Date(a+o)}function _(t,n){e(2,arguments);var r=i(n);return Z(t,-r)}function V(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const K=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return V("yy"===t?r%100:r,t.length)},ee=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):V(n+1,2)},te=function(e,t){return V(e.getUTCDate(),t.length)},ne=function(e,t){return V(e.getUTCHours()%12||12,t.length)},re=function(e,t){return V(e.getUTCHours(),t.length)},ae=function(e,t){return V(e.getUTCMinutes(),t.length)},ie=function(e,t){return V(e.getUTCSeconds(),t.length)},oe=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return V(Math.floor(r*Math.pow(10,n-3)),t.length)};var se=864e5;function ue(n){e(1,arguments);var r=1,a=t(n),i=a.getUTCDay(),o=(i<r?7:0)+i-r;return a.setUTCDate(a.getUTCDate()-o),a.setUTCHours(0,0,0,0),a}function le(n){e(1,arguments);var r=t(n),a=r.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(a+1,0,4),i.setUTCHours(0,0,0,0);var o=ue(i),s=new Date(0);s.setUTCFullYear(a,0,4),s.setUTCHours(0,0,0,0);var u=ue(s);return r.getTime()>=o.getTime()?a+1:r.getTime()>=u.getTime()?a:a-1}function ce(t){e(1,arguments);var n=le(t),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var a=ue(r);return a}var de=6048e5;function he(n,r){e(1,arguments);var a=r||{},o=a.locale,s=o&&o.options&&o.options.weekStartsOn,u=null==s?0:i(s),l=null==a.weekStartsOn?u:i(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=t(n),d=c.getUTCDay(),h=(d<l?7:0)+d-l;return c.setUTCDate(c.getUTCDate()-h),c.setUTCHours(0,0,0,0),c}function me(n,r){e(1,arguments);var a=t(n,r),o=a.getUTCFullYear(),s=r||{},u=s.locale,l=u&&u.options&&u.options.firstWeekContainsDate,c=null==l?1:i(l),d=null==s.firstWeekContainsDate?c:i(s.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(o+1,0,d),h.setUTCHours(0,0,0,0);var m=he(h,r),f=new Date(0);f.setUTCFullYear(o,0,d),f.setUTCHours(0,0,0,0);var g=he(f,r);return a.getTime()>=m.getTime()?o+1:a.getTime()>=g.getTime()?o:o-1}function fe(t,n){e(1,arguments);var r=n||{},a=r.locale,o=a&&a.options&&a.options.firstWeekContainsDate,s=null==o?1:i(o),u=null==r.firstWeekContainsDate?s:i(r.firstWeekContainsDate),l=me(t,n),c=new Date(0);c.setUTCFullYear(l,0,u),c.setUTCHours(0,0,0,0);var d=he(c,n);return d}var ge=6048e5;function pe(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),i=r%60;if(0===i)return n+String(a);var o=t||"";return n+String(a)+o+V(i,2)}function ve(e,t){return e%60==0?(e>0?"-":"+")+V(Math.abs(e)/60,2):ye(e,t)}function ye(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+V(Math.floor(a/60),2)+n+V(a%60,2)}const we={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return K(e,t)},Y:function(e,t,n,r){var a=me(e,r),i=a>0?a:1-a;return"YY"===t?V(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):V(i,t.length)},R:function(e,t){return V(le(e),t.length)},u:function(e,t){return V(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return V(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return V(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return ee(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return V(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(n,r,a,i){var o=function(n,r){e(1,arguments);var a=t(n),i=he(a,r).getTime()-fe(a,r).getTime();return Math.round(i/ge)+1}(n,i);return"wo"===r?a.ordinalNumber(o,{unit:"week"}):V(o,r.length)},I:function(n,r,a){var i=function(n){e(1,arguments);var r=t(n),a=ue(r).getTime()-ce(r).getTime();return Math.round(a/de)+1}(n);return"Io"===r?a.ordinalNumber(i,{unit:"week"}):V(i,r.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):te(e,t)},D:function(n,r,a){var i=function(n){e(1,arguments);var r=t(n),a=r.getTime();r.setUTCMonth(0,1),r.setUTCHours(0,0,0,0);var i=r.getTime(),o=a-i;return Math.floor(o/se)+1}(n);return"Do"===r?a.ordinalNumber(i,{unit:"dayOfYear"}):V(i,r.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return V(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});case"eeee":default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return V(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});case"cccc":default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return V(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return ne(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):re(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):V(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):V(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):ae(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):ie(e,t)},S:function(e,t){return oe(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return ve(a);case"XXXX":case"XX":return ye(a);case"XXXXX":case"XXX":default:return ye(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return ve(a);case"xxxx":case"xx":return ye(a);case"xxxxx":case"xxx":default:return ye(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+pe(a,":");case"OOOO":default:return"GMT"+ye(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+pe(a,":");case"zzzz":default:return"GMT"+ye(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return V(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return V((r._originalDate||e).getTime(),t.length)}};function be(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function Te(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const ke={p:Te,P:function(e,t){var n,r=e.match(/(P+)(p+)?/),a=r[1],i=r[2];if(!i)return be(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",be(a,t)).replace("{{time}}",Te(i,t))}};function Ce(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var De=["D","DD"],xe=["YY","YYYY"];function je(e){return-1!==De.indexOf(e)}function Me(e){return-1!==xe.indexOf(e)}function Ee(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var Pe=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ue=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ie=/^'([^]*?)'?$/,Ne=/''/g,Se=/[a-zA-Z]/;function Le(n,r,a){e(2,arguments);var o=String(r),s=a||{},u=s.locale||J,l=u.options&&u.options.firstWeekContainsDate,c=null==l?1:i(l),d=null==s.firstWeekContainsDate?c:i(s.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=u.options&&u.options.weekStartsOn,m=null==h?0:i(h),f=null==s.weekStartsOn?m:i(s.weekStartsOn);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!u.localize)throw new RangeError("locale must contain localize property");if(!u.formatLong)throw new RangeError("locale must contain formatLong property");var g=t(n);if(!H(g))throw new RangeError("Invalid time value");var p=Ce(g),v=_(g,p),y={firstWeekContainsDate:d,weekStartsOn:f,locale:u,_originalDate:g},w=o.match(Ue).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,ke[t])(e,u.formatLong,y):e})).join("").match(Pe).map((function(e){if("''"===e)return"'";var t=e[0];if("'"===t)return We(e);var a=we[t];if(a)return!s.useAdditionalWeekYearTokens&&Me(e)&&Ee(e,r,n),!s.useAdditionalDayOfYearTokens&&je(e)&&Ee(e,r,n),a(v,e,u.localize,y);if(t.match(Se))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return e})).join("");return w}function We(e){return e.match(Ie)[1].replace(Ne,"'")}const Ye=(()=>{let e;const t=()=>{currentTitle.textContent="Inbox",addTask.style.visibility="visible",projectTaskContainer.style.visibility="hidden",remove.textContent="Remove Completed Tasks",O(),e=j,Ae.removeChildren(),Ae.iterateTaskDisplay(e)},n=()=>{currentTitle.textContent="Today",addTask.style.visibility="visible",projectTaskContainer.style.visibility="hidden",remove.textContent="Remove Completed Tasks",e=M,Ae.removeChildren(),Ae.iterateTaskDisplay(e)},r=()=>{currentTitle.textContent="Weekly",addTask.style.visibility="visible",projectTaskContainer.style.visibility="hidden",remove.textContent="Remove Completed Tasks",e=E,Ae.removeChildren(),Ae.iterateTaskDisplay(e)},a=()=>{currentTitle.textContent="Monthly",addTask.style.visibility="visible",projectTaskContainer.style.visibility="hidden",remove.textContent="Remove Completed Tasks",e=P,Ae.removeChildren(),Ae.iterateTaskDisplay(e)},i=()=>{currentTitle.textContent="Important",addTask.style.visibility="visible",projectTaskContainer.style.visibility="hidden",remove.textContent="Remove Completed Tasks",e=U,Ae.removeChildren(),Ae.iterateTaskDisplay(e)},o=()=>{F(),currentTitle.textContent="Projects",addTask.style.visibility="hidden",remove.textContent="Remove Completed Tasks",e=L,Ae.removeProjectChildren(),Ae.removeChildren(),Ae.iterateTaskDisplay(e)};return inbox.addEventListener("click",(()=>{t()})),today.addEventListener("click",(()=>{n()})),week.addEventListener("click",(()=>{r()})),month.addEventListener("click",(()=>{a()})),important.addEventListener("click",(()=>{i()})),arrow.addEventListener("click",(()=>{o()})),{showInbox:t,showDaily:n,showWeekly:r,showMonthly:a,showImportant:i,showProjects:o}})(),Ae=(addTask.addEventListener("click",(()=>{taskModal.style.display="flex"})),closeBtn.onclick=()=>taskModal.style.display="none",submitTask.addEventListener("click",(()=>{if(""===submitTitle.value)return void alert("Task must have a title");if(""===modaldateinput.value)return void alert("Please enter a due date for this task");let n=Le(d(modaldateinput.value),"MM/dd/yyyy"),r=Le(new Date,"MM/dd/yyyy");if(!0===function(n,r){e(2,arguments);var a=t(n),i=t(r);return a.getTime()<i.getTime()}(new Date(n),new Date(r)))return void alert("This due date occurs before todays date");O();const a=new I(`${submitTitle.value}`,`${submitNotes.value}`,`${submitPriority.value}`,`${modaldateinput.value}`,`${j.length}`,!1);j.push(a),N(a),A(),submitTitle.value="",submitNotes.value="",modaldateinput.value="",taskModal.style.display="none",Ae.refreshTasksUI(currentTitle.textContent)})),(()=>{addProject.addEventListener("click",(()=>{projectModal.style.display="flex",projectTaskContainer.style.visibility="hidden",Ye.showProjects()})),projectTaskCloseBtn.onclick=()=>projectTaskModal.style.display="none",projectCloseBtn.onclick=()=>projectModal.style.display="none";submitProject.addEventListener("click",(()=>{if(""===submitProjectTitle.value)return void alert("Project must have a title");projectsContainer.style.visibility="hidden",arrow.classList.remove("arrowDown"),"visible"!==projectsContainer.style.visibility?(arrow.classList.add("arrowDown"),projectsContainer.style.visibility="visible"):projectsContainer.style.visibility="hidden",F();const e=new W(`${submitProjectTitle.value}`,`${L.length}`,!1,[]);L.push(e),q(L),submitProject.value="",projectModal.style.display="none",Ae.refreshTasksUI(currentTitle.textContent)})),submitProjectTask.addEventListener("click",(()=>{let e=document.getElementsByClassName("projectTitleDisplay")[0].id;if(""===projectTaskTitle.value)return void alert("Please give task a title");const t=new Y(projectTaskTitle.value,projectTaskNotes.value,L[e].projectTaskList.length,e,!1);L[e].projectTaskList.push(t),q(L),projectTaskTitle.value="",projectTaskNotes.value="",projectTaskModal.style.display="none",Ae.removeProjectTaskChildren(),L[e].projectTaskList.forEach((e=>{Ae.showProjectTaskUI(e.title,e.notes,e.projectTaskID,e.projID,e.completed)}))}))})(),(()=>{const e=()=>{for(;taskContainer.lastElementChild;)taskContainer.removeChild(taskContainer.lastElementChild)},t=t=>{"Inbox"===t?(e(),Ye.showInbox()):"Today"===t?(e(),Ye.showDaily()):"Weekly"===t?(e(),Ye.showWeekly()):"Monthly"===t?(e(),Ye.showMonthly()):"Important"===t?(e(),Ye.showImportant()):"Projects"===t&&(taskButtonContainer.style.visibility="visible",Ye.showProjects())},n=(e,t,n,r,a,i)=>{let o=document.createElement("div");o.classList.add("task"),o.setAttribute("id",`${r}`);let s=document.createElement("label");s.classList.add("checkbox-label");let u=document.createElement("input");u.setAttribute("type","checkbox"),s.appendChild(u);let l=document.createElement("span");l.classList.add("checkbox-custom"),s.appendChild(l);let c=document.createElement("div");c.setAttribute("id","taskTitle"),c.textContent=e;let d=document.createElement("div");d.setAttribute("id","taskNotes"),d.textContent="Notes:";let h=document.createElement("div");h.setAttribute("id","notes"),h.textContent=t;let m=document.createElement("div");m.setAttribute("id","dueDate"),m.textContent="Due Date:";let f=document.createElement("input");f.setAttribute("type","date"),f.setAttribute("id",r),f.value=`${n}`,f.addEventListener("change",(()=>{let e=f.value,t=f.id;j[t].dueDate=e,M=[],E=[],P=[],U=[],A(),j.forEach((e=>{N(e)})),Ae.refreshTasksUI(currentTitle.textContent)})),o.appendChild(s),o.appendChild(c),o.appendChild(d),d.appendChild(h),o.appendChild(m),m.appendChild(f),taskContainer.appendChild(o),!0===a?(c.style.textDecoration="line-through",u.checked=!0):!1===a&&(u.checked=!1,c.style.textDecoration="none"),"Important"===i&&c.classList.add("pseudoImportant"),u.addEventListener("click",(()=>{O(),!0===u.checked?(j[r].completed=!0,c.style.textDecoration="line-through",A(),S(!0,j,r)):!1===u.checked&&(j[r].completed=!1,c.style.textDecoration="none",A(),S(!1,j,r))}))},r=(e,n,r)=>{let a=document.createElement("div");a.setAttribute("id",n),a.classList.add("projectList");let i=document.createElement("label");i.classList.add("checkbox-label");let o=document.createElement("input");o.setAttribute("type","checkbox"),i.appendChild(o);let s=document.createElement("span");s.classList.add("checkbox-custom"),s.style.marginTop="5px",i.appendChild(s);let u=document.createElement("div");u.setAttribute("id",n),u.textContent=e,u.classList.add("projectTitle"),a.appendChild(i),a.appendChild(u),projectsContainer.appendChild(a),!0===r?(o.checked=!0,u.style.textDecoration="line-through"):!1===r&&(o.checked=!1,u.style.textDecoration="none"),o.addEventListener("click",(()=>{F(),!0===o.checked?(L[n].completed=!0,u.style.textDecoration="line-through",q(L),t(currentTitle.textContent)):!1===o.checked&&(L[n].completed=!1,u.style.textDecoration="none",q(L),t(currentTitle.textContent))})),a.addEventListener("click",(()=>{taskButtonContainer.style.visibility="visible",projectTaskContainer.style.visibility="visible",Ye.showProjects(),Ae.removeProjectTaskChildren();let t=document.createElement("div"),r=document.createElement("div");r.classList.add("taskControl"),r.setAttribute("id",`${n}`),r.setAttribute("id","addProjectTask"),r.textContent="Add Project Task",t.classList.add("projectTitleDisplay"),t.setAttribute("id",`${n}`),t.textContent=e,taskContainer.appendChild(t),taskContainer.appendChild(r),L[a.id].projectTaskList.forEach((e=>{Ae.showProjectTaskUI(e.title,e.notes,e.projectTaskID,e.projID,e.completed)})),r.addEventListener("click",(()=>{projectTaskModal.style.display="flex"}))}))};return remove.addEventListener("click",(()=>{O(),F(),j.forEach((e=>{!0===e.completed&&j.splice(e.taskID,1)})),L.forEach((e=>{!0===e.completed&&L.splice(e.projectID,1)})),A(),q(L),location.reload()})),arrow.addEventListener("click",(()=>{arrow.classList.toggle("arrowDown"),"visible"!==projectsContainer.style.visibility?projectsContainer.style.visibility="visible":projectsContainer.style.visibility="hidden"})),{removeChildren:e,showTaskUI:n,iterateTaskDisplay:e=>{e!==L?e.forEach((e=>{n(e.title,e.notes,e.dueDate,e.taskID,e.completed,e.priority)})):e.forEach((e=>{r(e.title,e.projectID,e.completed)}))},refreshTasksUI:t,showProjectUI:r,showProjectTaskUI:(e,t,n,r,a)=>{let i=document.createElement("div");i.classList.add("task"),i.setAttribute("id",`${n}`);let o=document.createElement("label");o.classList.add("checkbox-label");let s=document.createElement("input");s.setAttribute("type","checkbox"),o.appendChild(s);let u=document.createElement("span");u.classList.add("checkbox-custom"),o.appendChild(u);let l=document.createElement("div");l.setAttribute("id","taskTitle"),l.textContent=e;let c=document.createElement("div");c.setAttribute("id","taskNotes"),c.textContent="Notes:";let d=document.createElement("div");d.setAttribute("id","notes"),d.textContent=t,i.appendChild(o),i.appendChild(l),i.appendChild(c),projectTaskContainer.appendChild(i),!0===a?(s.checked=!0,l.style.textDecoration="line-through"):!1===a&&(s.checked=!1,l.style.textDecoration="none"),s.addEventListener("click",(()=>{F();let e=document.getElementsByClassName("projectTitleDisplay")[0].id;console.log(n),!0===s.checked?(L[e].projectTaskList[n].completed=!0,l.style.textDecoration="line-through",q(L)):!1===s.checked&&(L[e].projectTaskList[n].completed=!1,l.style.textDecoration="none",q(L))}))},removeProjectChildren:()=>{for(;projectsContainer.lastElementChild;)projectsContainer.removeChild(projectsContainer.lastElementChild)},removeProjectTaskChildren:()=>{for(;projectTaskContainer.lastElementChild;)projectTaskContainer.removeChild(projectTaskContainer.lastElementChild)}}})());console.log("webpack worked"),window.localStorage,function(){O(),F();let e=0,t=0;j.forEach((t=>{t.taskID=e,N(t),e++})),A(),L.forEach((e=>{e.projectID=t,t++,q(L)})),Ae.iterateTaskDisplay(j),Ae.iterateTaskDisplay(L)}(),function(e,t,n){var r=new Date,a=new Date;(r.getHours()>24||24==r.getHours()&&r.getMinutes()>0||24==r.getHours()&&0==r.getMinutes()&&r.getSeconds()>=0)&&a.setDate(r.getDate()+1),a.setHours(24),a.setMinutes(0),a.setSeconds(0);var i=a.getTime()-r.getTime();setTimeout((function(){window.location.reload()}),i)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,